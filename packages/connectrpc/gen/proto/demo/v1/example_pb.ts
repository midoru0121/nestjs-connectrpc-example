// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/demo/v1/example.proto (package demo.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message demo.v1.UserCreateRequest
 */
export class UserCreateRequest extends Message<UserCreateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<UserCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateRequest {
    return new UserCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateRequest | PlainMessage<UserCreateRequest> | undefined, b: UserCreateRequest | PlainMessage<UserCreateRequest> | undefined): boolean {
    return proto3.util.equals(UserCreateRequest, a, b);
  }
}

/**
 * @generated from message demo.v1.UserCreateResponse
 */
export class UserCreateResponse extends Message<UserCreateResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UserCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreateResponse {
    return new UserCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreateResponse | PlainMessage<UserCreateResponse> | undefined, b: UserCreateResponse | PlainMessage<UserCreateResponse> | undefined): boolean {
    return proto3.util.equals(UserCreateResponse, a, b);
  }
}

/**
 * @generated from message demo.v1.UserGetRequest
 */
export class UserGetRequest extends Message<UserGetRequest> {
  constructor(data?: PartialMessage<UserGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetRequest {
    return new UserGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetRequest {
    return new UserGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetRequest | PlainMessage<UserGetRequest> | undefined, b: UserGetRequest | PlainMessage<UserGetRequest> | undefined): boolean {
    return proto3.util.equals(UserGetRequest, a, b);
  }
}

/**
 * @generated from message demo.v1.UserGetResponse
 */
export class UserGetResponse extends Message<UserGetResponse> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<UserGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserGetResponse {
    return new UserGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserGetResponse {
    return new UserGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserGetResponse | PlainMessage<UserGetResponse> | undefined, b: UserGetResponse | PlainMessage<UserGetResponse> | undefined): boolean {
    return proto3.util.equals(UserGetResponse, a, b);
  }
}

/**
 * @generated from message demo.v1.UserUpdateRequest
 */
export class UserUpdateRequest extends Message<UserUpdateRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UserUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateRequest {
    return new UserUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined, b: UserUpdateRequest | PlainMessage<UserUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UserUpdateRequest, a, b);
  }
}

/**
 * @generated from message demo.v1.UserUpdateResponse
 */
export class UserUpdateResponse extends Message<UserUpdateResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UserUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdateResponse {
    return new UserUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined, b: UserUpdateResponse | PlainMessage<UserUpdateResponse> | undefined): boolean {
    return proto3.util.equals(UserUpdateResponse, a, b);
  }
}

/**
 * @generated from message demo.v1.UserDeleteRequest
 */
export class UserDeleteRequest extends Message<UserDeleteRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UserDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDeleteRequest {
    return new UserDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserDeleteRequest | PlainMessage<UserDeleteRequest> | undefined, b: UserDeleteRequest | PlainMessage<UserDeleteRequest> | undefined): boolean {
    return proto3.util.equals(UserDeleteRequest, a, b);
  }
}

/**
 * @generated from message demo.v1.UserDeleteResponse
 */
export class UserDeleteResponse extends Message<UserDeleteResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<UserDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "demo.v1.UserDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDeleteResponse {
    return new UserDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserDeleteResponse | PlainMessage<UserDeleteResponse> | undefined, b: UserDeleteResponse | PlainMessage<UserDeleteResponse> | undefined): boolean {
    return proto3.util.equals(UserDeleteResponse, a, b);
  }
}

